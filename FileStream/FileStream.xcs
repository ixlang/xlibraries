package FileStream {
//xlang 

	public static class FileInputStream : Stream{
		long filehandler;

		public FileInputStream(String path){
			filehandler = XPlatform.openSystemFile(path, "r");
			if (filehandler == 0){
				throw new IllegalArgumentException("file " + path + " can not open");
			}
		} 
		public FileInputStream(FSObject file){
			filehandler = XPlatform.openSystemFile(file.getPath(), "r");
			if (filehandler == 0){
				throw new IllegalArgumentException("file " + file.getPath() + " can not open");
			}
		}
        public FileInputStream(FSObject dir, String file){
            String path = dir.getPath().appendPath(file);
			filehandler = XPlatform.openSystemFile(path, "r");
			if (filehandler == 0){
				throw new IllegalArgumentException("file " + path + " can not open");
			}
		}
		public bool attach(String path){
			if (filehandler != 0){
				_system_.closeFile(filehandler);
				filehandler = 0;
			}
			filehandler = XPlatform.openSystemFile(path, "r");
			return filehandler != 0;
		}
        
		public void checkValid(){
			if (filehandler == 0){
				throw new IllegalArgumentException("The Stream is not ready");
			}
		}
		public long available(bool bwait){
			return length() - getPosition();
		}
		public long seek(int type, long pos){
			checkValid();
			return _system_.seekFile(filehandler, type, pos);
		}
		
		public long getPosition(){
			checkValid();
			return _system_.getFileSeek(filehandler);
		}
		
		public long length(){
			checkValid();
			return _system_.fileLength(filehandler);
		}

		public byte[] read(){
			checkValid();
			byte[] data = new byte[length()];
			_system_.readFile(filehandler, data, 0, data.length);
			return data;
		}

		public int read(byte [] data , int position, int length)override{
			checkValid();
			return _system_.readFile(filehandler, data, position, length);
		}

		public int write(byte [] data , int position, int length)override{
			return 0;
		}
		
		public void close(){
			if (filehandler != 0){
				_system_.closeFile(filehandler);
				filehandler = 0;
			}
		}
		
		void finalize(){
			close();
		}
	};
		
	public static class FileOutputStream : Stream{
		long filehandler;

		public FileOutputStream(String path){
			filehandler = XPlatform.openSystemFile(path, "w");
			if (filehandler == 0){
				throw new IllegalArgumentException("file " + path + " can not open");
			}
		}
		public FileOutputStream(String path, bool append){
			filehandler = XPlatform.openSystemFile(path, append ? "a" : "w");
			if (filehandler == 0){
				throw new IllegalArgumentException("file " + path + " can not open");
			}
		}
        
		public FileOutputStream(FSObject file){
			filehandler = XPlatform.openSystemFile(file.getPath(), "w");
			if (filehandler == 0){
				throw new IllegalArgumentException("file " + file.getPath() + " can not open");
			}
		}
		public FileOutputStream(FSObject file, bool append){
			filehandler = XPlatform.openSystemFile(file.getPath(), append ? "a" : "w");
			if (filehandler == 0){
				throw new IllegalArgumentException("file " + file.getPath() + " can not open");
			}
		}
        public FileOutputStream(FSObject dir, String file, bool append){
            String path = dir.getPath().appendPath(file);
			filehandler = XPlatform.openSystemFile(path, append ? "a" : "w");
			if (filehandler == 0){
				throw new IllegalArgumentException("file " + path + " can not open");
			}
		}
		public bool attach(String path){
			if (filehandler != 0){
				_system_.closeFile(filehandler);
				filehandler = 0;
			}
			filehandler = XPlatform.openSystemFile(path, "w");
			return filehandler != 0;
		}
		public void checkValid(){
			if (filehandler == 0){
				throw new IllegalArgumentException("The Stream is not ready");
			}
		}
		public long available(bool bwait){
			return 1;
		}
		public long seek(int type, long pos){
			return 0;
		}
		
		public long getPosition(){
			return 0;
		}
		
		public long length(){
			checkValid();
			return 0;
		}

		public byte[] read(){
			return nilptr;
		}

		public int read(byte [] data , int position, int length)override{
			return 0;
		}
		
		public long write(byte [] data){
			checkValid();
			return _system_.writeFile(filehandler, data, 0, data.length);
		}
		
		public int write(byte [] data , int position, int length)override{
			checkValid();
			return _system_.writeFile(filehandler, data, position, length);
		}
		
		public void close(){
			if (filehandler != 0){
				_system_.closeFile(filehandler);
				filehandler = 0;
			}
		}
        
		void finalize(){
			close();
		}
	};
};
