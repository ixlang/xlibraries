//xlang Source, Name:SqlServer.xcsm 
//Date: Sat Sep 12:06:04 2019 

class AdoConnector : Sql.Connection{

    long hAdo;
    
    int port = 1433;
    int timeout = 0;
    
    public enum MysqlOption{
		PORT,
        TIMEOUT,
        CHARSET,
        SELECTDB
    };
    
    public AdoConnector(){
        if (_system_.getPlatformId() != 0){
            throw new IllegalArgumentException("ADO not support this Operating System!");
        }
    }
    /*static class MysqlRegister : Sql.ConnectionRegister{
		Sql.Connection allocConnection(String drivername){
			if (drivername.equals("mysql")){
				return new AdoConnector();
            }
            return nilptr;
        }
    };
    
	static bool registry(){
		if (Helper.init()){
			Sql.Database.reigstry(DRIVERNAME, new MysqlRegister());
            return true;
        }
        return false;
    }
       */ 
    protected static class Helper :Library {
    	static bool bloaded = false;
        public static bool init(){ 

			if (bloaded == false){
                try{
                    loadLibrary("adohelper");
                    bloaded = true;
                }catch(Exception e){
                    _system_.output(e.getMessage());
                }
            }
            return bloaded;
        }
        
        public import{
            Pointer cdecl ado_alloc(String driver, String host, int port, String name, String pwd, int timeout, ObjectPtr, ObjectRef);
            void cdecl ado_delloc(Pointer);
            Pointer cdecl ado_execute(Pointer, String sql, bool needrs, ObjectPtr, ObjectRef);
            void cdecl ado_delloc_rs(Pointer);
            
            bool cdecl ado_rs_next(Pointer);
            bool cdecl ado_rs_prev(Pointer);
            
            bool cdecl ado_rs_first(Pointer);
            bool cdecl ado_rs_last(Pointer);
            int cdecl ado_rs_count(Pointer);
            bool cdecl ado_rs_iseof(Pointer);
            
            Object cdecl ado_rs_getValue(Pointer, String);
            int cdecl ado_rs_getValueI(Pointer, String);
            long cdecl ado_rs_getValueL(Pointer, String);
            double cdecl ado_rs_getValueD(Pointer, String);
            
            Object cdecl ado_rs_getIValue(Pointer, int);
            int cdecl ado_rs_getIValueI(Pointer, int);
            long cdecl ado_rs_getIValueL(Pointer, int);
            double cdecl ado_rs_getIValueD(Pointer, int);
        };
    };
    
    public static class AdoResultSet : Sql.ResultSet{
        long hres;
        
        public AdoResultSet(long r){
            hres = r;
        }
        
		public bool first(){
            return Helper.ado_rs_first(hres);
        }
        
		public bool last(){
            return Helper.ado_rs_last(hres);
        }

		public bool next(){
            return Helper.ado_rs_next(hres);
        }
        
		public bool previous(){
            return Helper.ado_rs_prev(hres);
        }

		public bool isFirst(){
            throw new Sql.DatabaseNotSupportException("isFirst");
            return false;
        }
        
		public bool isLast(){
            throw new Sql.DatabaseNotSupportException("isLast");
            return false;
        }
        
        public bool isEof(){
            return Helper.ado_rs_iseof(hres);
        }
        
		public bool isValid(){
            return hres != 0;
        }
        
		public int getInt(String columnlabel){
            return Helper.ado_rs_getValueI(hres, columnlabel);
        }
        
		public long getLong(String columnlabel){
            return Helper.ado_rs_getValueL(hres, columnlabel);
        }
        
		public double getDouble(String columnlabel){
            return Helper.ado_rs_getValueD(hres, columnlabel);
        }
        
		public byte getByte(String columnlabel){
            return Helper.ado_rs_getValueI(hres, columnlabel);
        }
        
		public bool getBoolean(String columnlabel){
            return Helper.ado_rs_getValueI(hres, columnlabel) != 0;
        }
        
		public String getString(String columnlabel){
            return (String)Helper.ado_rs_getValue(hres, columnlabel);
        }

		public int getInt(int columnIndex){
            return Helper.ado_rs_getIValueI(hres, columnIndex);
        }
        
		public long getLong(int columnIndex){
            return Helper.ado_rs_getIValueL(hres, columnIndex);
        }
        
		public double getDouble(int columnIndex){
            return Helper.ado_rs_getIValueD(hres, columnIndex);
        }
        
		public byte getByte(int columnIndex){
            return Helper.ado_rs_getIValueI(hres, columnIndex);
        }
        
		public bool getBoolean(int columnIndex){
            return Helper.ado_rs_getIValueI(hres, columnIndex) != 0;
        }
        
		public String getString(int columnIndex){
            return (String)Helper.ado_rs_getIValue(hres, columnIndex);
        }

		public int findColumn(String){
            throw new Sql.DatabaseNotSupportException("findColumn");
            return -1;
        }
        
		public long getRowCount(){
            return Helper.ado_rs_count(hres);
        }
        
		public int getRow(){
            throw new Sql.DatabaseNotSupportException("getRow");
            return 0;
        }
        
		public void close(){
            if (hres != 0){
                Helper.ado_delloc_rs(hres);
                hres = 0;
            }
        }
        
        void finalize(){
            close();
        }
    };
    
    static class AdoStatement : Sql.Statement{
        AdoConnector __ado;
        
        public AdoStatement(AdoConnector m){
            __ado = m;
        }
        
        public int execute(String sql){
            int errcode = 0;
            String errmsg;
            
            long hrs = Helper.ado_execute(__ado.hAdo,sql, false, errcode, errmsg);
            if (0 == hrs){
                throw new Sql.SqlException(errcode, errmsg);
            }else{
              Helper.ado_delloc_rs(hrs);  
            }
            return 0;
        }
        
        public Sql.ResultSet executeQuery(String sql){
            int errcode = 0;
            String errmsg;
            long hrs = Helper.ado_execute(__ado.hAdo,sql, true, errcode, errmsg);
            if (0 == hrs){
                throw new Sql.SqlException(errcode, errmsg);
            }
            return new AdoResultSet(hrs);
        }
        
        public int executeUpdate(String sql){
            int errcode = 0;
            String errmsg;
            long hrs = Helper.ado_execute(__ado.hAdo,sql, false, errcode, errmsg);
            if (0 == hrs){
                throw new Sql.SqlException(errcode, errmsg);
            }else{
              Helper.ado_delloc_rs(hrs);  
            }
            return 0;
        }
        
        public Sql.ResultSet getResult(){ throw new Sql.DatabaseNotSupportException("getResult"); return nilptr;     }
        
        public void close(){ }
    };
    
    
    public class AdoPreparedStatement : Sql.PreparedStatement{
        AdoConnector __ado;
        
        public AdoPreparedStatement(AdoConnector m, String sql){
            super(sql);
            __ado = m;
        }
        
        public int execute(String sql){
            int errcode = 0;
            String errmsg;
            long hrs = Helper.ado_execute(__ado.hAdo,sql, false, errcode, errmsg);
            if (0 == hrs){
                throw new Sql.SqlException(errcode, errmsg);
            }else{
              Helper.ado_delloc_rs(hrs);  
            }
            return 0;
        }
        
        public Sql.ResultSet executeQuery(String sql){
            int errcode = 0;
            String errmsg;
            long hrs = Helper.ado_execute(__ado.hAdo,sql, false, errcode, errmsg);
            if (0 == hrs){
                throw new Sql.SqlException(errcode, errmsg);
            }
            return new AdoResultSet(hrs);
        }
        
        public int executeUpdate(String sql){
            int errcode = 0;
            String errmsg;
            long hrs = Helper.ado_execute(__ado.hAdo,sql, false, errcode, errmsg);
            if (0 == hrs){
                throw new Sql.SqlException(errcode, errmsg);
            }else{
              Helper.ado_delloc_rs(hrs);  
            }
            return 0;
        }
        
        public Sql.ResultSet getResult(){           throw new Sql.DatabaseNotSupportException("getResult"); return nilptr;        }
        
        public void close(){
        
        }
    };
    
    
	public void close() override {
		//TODO:	
        if (hAdo != 0){
            Helper.ado_delloc(hAdo);
            hAdo = 0;
        }
	}

    void finalize(){
        close();
    }
    
    String driver;
 
    public void setDriver(String strDrv){
        driver = strDrv;
    }
    
	public void create(String uri, String username, String pwd) override {

        if (driver == nilptr){
            throw new Sql.SqlException(-1, "driver is nilptr");
        }
        int errcode = 0;
        String errmsg;
            
        hAdo = Helper.ado_alloc(driver, uri, port, username, pwd, timeout, errcode, errmsg);
        
        if (0l == hAdo){
            throw new Sql.SqlException(errcode, errmsg);
        }
	}

	public bool isClosed() override {
		//TODO:	
        return hAdo != 0;
	}


    public int getErrorCode()override{
        //throw new Sql.DatabaseNotSupportException("getErrorCode");
        return 0;
    }
    
    public String getError()override{
        throw new Sql.DatabaseNotSupportException("getError");
        return nilptr;
    }
    
    public String getSqlState(){
        throw new Sql.DatabaseNotSupportException("getSqlState");
        return nilptr;
    }
    
    public String getInfo(){
        throw new Sql.DatabaseNotSupportException("getInfo");
        return nilptr;
    }
    
	public Object getOption(int opt) override {
		//TODO:	
        throw new Sql.DatabaseNotSupportException("getOption");
        return nilptr;
	}

	public void setOption(int opt, Object option) override {
		switch(opt){
			case MysqlOption.PORT:
                port = (int)option;
            break;
            case MysqlOption.TIMEOUT:
                timeout = (int)option;
            break;
            default:
            throw new Sql.DatabaseNotSupportException("getOption");
            break;
        }
	}

	public Sql.Statement createStatement() override {
		return new AdoStatement(this);
	}

	public Sql.PreparedStatement prepareStatement(String sql) override {
		return new AdoPreparedStatement(this, sql);
	}
};