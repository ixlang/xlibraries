package Qt{
    public class QObject : QCore {
        public void setOnFileSystemChangeListener(onFileSystemChangeListener l) {
            _fsweListener = l;
        }
        public TableWidgetEventListener  _tableenvlis = nilptr;
        public onFileSystemChangeListener _fsweListener = nilptr;
        public onEditEventListener	 _editEventListener = nilptr;
        public onMouseEventListener _mouseListener = nilptr;
        public onKeyEventListener   _keyListener = nilptr;
        public onFocusEventListener _focusListener = nilptr;
        public onScopeEventListener _scopeListener = nilptr;
        public onPaintListener      _paintEvent = nilptr;
        public onLayoutEventListener _layoutEvent = nilptr;
        public onStatusListener _statusEvent = nilptr;
        public onUpdateListener _updateListener = nilptr;
        public onEventListener _eventListener = nilptr;
        public onTreeViewItemEvent _treeitemevent = nilptr;
        public onNotifyListener    _notifyListener = nilptr;
        public onClickListener     _clicklistener = nilptr;
        public SciEventListener		_sciEventListener = nilptr;
        public onContextMenuListener	_contextMenuListener = nilptr;
        public onActivateListener _activateListener = nilptr;
        public onComboBoxEventListener _comboboxListener = nilptr;
        public onDragListener _dragListener = nilptr;
        public void setOnDragListener(onDragListener l) {
            _dragListener = l;
        }
        public void setOnTableWidgetEventListener(TableWidgetEventListener l) {
            _tableenvlis = l;
        }
        public void setOnComboBoxEventListener(onComboBoxEventListener l) {
            _comboboxListener = l;
        }
        public void setOnActivateListener(onActivateListener l) {
            _activateListener = l;
        }
        public void setOnContextMenuListener(onContextMenuListener l) {
            _contextMenuListener = l;
        }
        public void setOnSciEventListener(SciEventListener l) {
            _sciEventListener = l;
        }
        public void setOnClickListener(onClickListener l) {
            _clicklistener = l;
        }

        public void setOnNotifyListener(onNotifyListener l) {
            _notifyListener = l;
        }

        public void setOnTreeViewItemEvent(onTreeViewItemEvent l) {
            _treeitemevent = l;
        }
        public void setOnEventListener(onEventListener l) {
            _eventListener = l;
        }
        public void setOnUpdateListener(onUpdateListener l) {
            _updateListener = l;
        }
        public void setOnEditEventListener(onEditEventListener l) {
            _editEventListener = l;
        }
        public void setOnMouseEventListener(onMouseEventListener l) {
            _mouseListener = l;
        }
        public void setOnKeyEventListener(onKeyEventListener l) {
            _keyListener = l;
        }
        public void setOnFocusEventListener(onFocusEventListener l) {
            _focusListener = l;
        }
        public void setOnScopeEventListener(onScopeEventListener l) {
            _scopeListener = l;
        }
        public void setOnPaintListener(onPaintListener l) {
            _paintEvent = l;
        }
        public void setOnLayoutEventListener(onLayoutEventListener l) {
            _layoutEvent = l;
        }
        public void setOnStatusListener(onStatusListener l) {
            _statusEvent = l;
        }

        public void onAttach() {

        }

        public QObject() {
        }

        public QObject(long handle) {
            super(handle);
        }

        public QObject findByName(String name) {
            return (QObject)QtXnl.findControl(nativehandle, name);
        }

        public QObject attachByName(@NotNilptr QObject newObj, String name) {
            newObj.nativehandle = QtXnl.attachControl(nativehandle, newObj, name);
            if (newObj.nativehandle != 0) {
                newObj.onAttach();
                return newObj;
            }
            return nilptr;
        }

        public bool attach(@NotNilptr QObject obj) {
            nativehandle = QtXnl.core_attach(obj.nativehandle, this);
            if (nativehandle != 0) {
                onAttach();
                return true;
            }
            return false;
        }

        public String getName() {
            return (String)QtXnl.core_getName(nativehandle);
        }

        public void setName(String name) {
            QtXnl.widget_slot_string(nativehandle, Constant.OBJECTSETNAME, name);
        }

        public String getClassName() {
            return (String)QtXnl.core_getClassName(nativehandle);
        }

        public QObject getParent() {
            return (QObject)QtXnl.core_getParent(nativehandle);
        }

        public void onTimer(int timeId) {}
        ////
        public void onMouseButtonPress(int Button, int x, int y, int flags, int source) {
            if (_mouseListener != nilptr) {
                _mouseListener.onMouseButtonPress(this, Button, x, y, flags, source);
            }
        }

        public void onMouseButtonRelease(int Button, int x, int y, int flags, int source) {
            if (_mouseListener != nilptr) {
                _mouseListener.onMouseButtonRelease(this, Button, x, y, flags, source);
            }
        }

        public void onMouseButtonDblClick(int Button, int x, int y, int flags, int source) {
            if (_mouseListener != nilptr) {
                _mouseListener.onMouseButtonDblClick(this, Button, x, y, flags, source);
            }
        }

        public void onMouseMove(int Button, int x, int y, int flags, int source) {
            if (_mouseListener != nilptr) {
                _mouseListener.onMouseMove(this, Button, x, y, flags, source);
            }
        }
        public void onWheel(int button, int x,int y,int Orientation,int delta, bool inverted) {
            if (_mouseListener != nilptr) {
                _mouseListener.onWheel(this, button, x, y, Orientation, delta, inverted);
            }
        }
        ////
        public bool onKeyPress(int key, bool repeat, int count, String text, int scanCode, int virtualKey, int modifier) {
            if (_keyListener != nilptr) {
                return _keyListener.onKeyPress(this, key, repeat, count, text, scanCode, virtualKey, modifier);
            }
            return true;
        }
        public bool onKeyRelease(int key, bool repeat, int count, String text, int scanCode, int virtualKey, int modifier) {
            if (_keyListener != nilptr) {
                return _keyListener.onKeyRelease(this, key, repeat, count, text, scanCode, virtualKey, modifier);
            }
            return true;
        }
        public void onFocusIn(bool focus, int reson) {
            if (_focusListener != nilptr) {
                _focusListener.onFocusIn(this, focus, reson);
            }
        }
        public void onFocusOut(bool focus, int reson) {
            if (_focusListener != nilptr) {
                _focusListener.onFocusOut(this, focus, reson);
            }
        }
        public void onFocusAboutToChange(bool focus, int reson) {
            if (_focusListener != nilptr) {
                _focusListener.onFocusAboutToChange(this, focus, reson);
            }
        }
        public void onEnter(int x, int y) {
            if (_scopeListener != nilptr) {
                _scopeListener.onEnter(this, x, y);
            }
        }
        public void onLeave() {
            if (_scopeListener != nilptr) {
                _scopeListener.onLeave(this);
            }
        }
        public void onPaint(int l,int t, int r,int b, long hpaint) {
            if (_paintEvent != nilptr) {
                _paintEvent.onPaint(this, l, t, r, b, hpaint);
            }
        }
        public void onMove(int x,int y,int oldx,int oldy) {
            if (_layoutEvent != nilptr) {
                _layoutEvent.onMove(this, x, y, oldx, oldy);
            }
        }
        public void onResize(int w, int h, int oldw, int oldh) {
            if (_layoutEvent != nilptr) {
                _layoutEvent.onResize(this, w, h, oldw, oldh);
            }
        }
        public void onCreate() {
            if (_statusEvent != nilptr) {
                _statusEvent.onCreate(this);
            }
        }
        public void onDestroy() {
            if (_statusEvent != nilptr) {
                _statusEvent.onDestroy(this);
            }
        }
        public void onShow() {
            if (_statusEvent != nilptr) {
                _statusEvent.onShow(this);
            }
        }
        public void onHide() {
            if (_statusEvent != nilptr) {
                _statusEvent.onHide(this);
            }
        }
        public bool onClose() {
            if (_statusEvent != nilptr) {
                return _statusEvent.onClose(this);
            }
            return true;
        }
        public void onQuit() {
            if (_statusEvent != nilptr) {
                _statusEvent.onQuit(this);
            }
        }
        public void onParentChange() {
            if (_statusEvent != nilptr) {
                _statusEvent.onParentChange(this);
            }
        }

        public void onTrigger() {
            if (_eventListener != nilptr) {
                _eventListener.onTrigger(this);
            }
        }

        public void onParentAboutToChange() {}
        public void onThreadChange() {}
        public void onWindowActivate() {
            if (_activateListener != nilptr) {
                _activateListener.onWindowActivate(this);
            }
        }
        public void onWindowDeactivate() {
            if (_activateListener != nilptr) {
                _activateListener.onWindowDeactivate(this);
            }
        }
        public void onShowToParent() {}
        public void onHideToParent() {  }
        public void onClipboard() {     }
        public void onWinEventAct() {}
        public void onDeferredDelete() {}
        public bool onDragEnter(int l,int t,int r,int b) {
            if (_dragListener != nilptr) {
                return _dragListener.onDragEnter(this, l,t,r,b);
            }
            return true;
        }
        public bool onDragMove(int l,int t,int r,int b) {
            if (_dragListener != nilptr) {
                return _dragListener.onDragMove(this, l,t,r,b);
            }
            return true;
        }
        public bool onDragLeave(int l,int t,int r,int b) {
            if (_dragListener != nilptr) {
                return _dragListener.onDragLeave(this, l,t,r,b);
            }
            return true;
        }
        public void onDrop(Object [] object) {
            if (_dragListener != nilptr) {
                _dragListener.onDrop(this, object);
            }
        }
        public void onDragResponse() {}
        public void onLayoutRequest() {}
        public void onUpdateRequest() {
            if (_updateListener != nilptr) {
                _updateListener.onUpdate(this);
            }
        }
        public void onUpdateLater() {}
        public void onEmbeddingControl() {}
        public void onActivateControl() {}
        public void onDeactivateControl() {}
        public void onContextMenu(int x,int y, int reson) {
            if (_contextMenuListener != nilptr) {
                _contextMenuListener.onContextMenu(this, x, y, reson);
            }
        }
        public void onInputMethod() {}
        public void onTabletMove() {}
        public void onLocaleChange() {}
        public void onLanguageChange() {}
        public void onLayoutDirectionChange() {}
        public void onStyle() {}
        public void onTabletPress() {}
        public void onTabletRelease() {}
        public void onOkRequest() {}
        public void onHelpRequest(int x,int y) {}
        public void onIconDrag() {}
        public void onFontChange() {}
        public void onEnabledChange() {}
        public void onActivationChange() {}
        public void onStyleChange() {}
        public void onIconTextChange() {}
        public void onModifiedChange() {}
        public void onMouseTrackingChange() {}
        public void onWindowBlocked() {}
        public void onWindowUnblocked() {}

        public void onWindowStateChange(int state, int oldState) {
            if (_statusEvent != nilptr) {
                _statusEvent.onWindowStateChange(this, state, oldState);
            }
        }

        public void onReadOnlyChange() {}
        public void onToolTip(int x,int y) {}
        public void onWhatsThis(int x,int y) {}
        public void onStatusTip(String tips) {}
        public void onActionChanged() {}
        public void onActionAdded() {}
        public void onActionRemoved() {}
        public void onFileOpen() {}
        public void onShortcut(int key, int shortcutId, bool ambig) {}
        public void onShortcutOverride() {}
        public void onWhatsThisClicked() {}
        public void onToolBarChange() {}
        public void onApplicationActivate() {}
        public void onApplicationDeactivate() {}
        public void onQueryWhatsThis() {}
        public void onEnterWhatsThisMode() {}
        public void onLeaveWhatsThisMode() {}
        public void onZOrderChange() {}
        public void onHoverEnter(int x,int y) {}
        public void onHoverLeave(int x,int y) {}
        public void onHoverMove(int x,int y) {}
        public void onAcceptDropsChange() {}
        public void onZeroTimerEvent() {}
        public void onGraphicsSceneMouseMove() {}
        public void onGraphicsSceneMousePress() {}
        public void onGraphicsSceneMouseRelease() {}
        public void onGraphicsSceneMouseDoubleClick() {}
        public void onGraphicsSceneContextMenu() {}
        public void onGraphicsSceneHoverEnter() {}
        public void onGraphicsSceneHoverMove() {}
        public void onGraphicsSceneHoverLeave() {}
        public void onGraphicsSceneHelp() {}
        public void onGraphicsSceneDragEnter() {}
        public void onGraphicsSceneDragMove() {}
        public void onGraphicsSceneDragLeave() {}
        public void onGraphicsSceneDrop() {}
        public void onGraphicsSceneWheel() {}
        public void onKeyboardLayoutChange() {}
        public void onDynamicPropertyChange() {}
        public void onTabletEnterProximity() {}
        public void onTabletLeaveProximity() {}
        public void onNonClientAreaMouseMove() {}
        public void onNonClientAreaMouseButtonPress() {}
        public void onNonClientAreaMouseButtonRelease() {}
        public void onNonClientAreaMouseButtonDblClick() {}
        public void onMacSizeChange() {}
        public void onContentsRectChange() {}
        public void onMacGLWindowChange() {}
        public void onFutureCallOut() {}
        public void onGraphicsSceneResize() {}
        public void onGraphicsSceneMove() {}
        public void onCursorChange() {}
        public void onToolTipChange() {}
        public void onNetworkReplyUpdated() {}
        public void onGrabMouse() {}
        public void onUngrabMouse() {}
        public void onGrabKeyboard() {}
        public void onUngrabKeyboard() {}
        public void onMacGLClearDrawable() {}
        public void onStateMachineSignal() {}
        public void onStateMachineWrapped() {}
        public void onTouchBegin() {}
        public void onTouchUpdate() {}
        public void onTouchEnd() {}
        public void onNativeGesture() {}
        public void onRequestSoftwareInputPanel() {}
        public void onCloseSoftwareInputPanel() {}
        public void onWinIdChange() {}
        public void onGesture() {}
        public void onGestureOverride() {}
        public void onScrollPrepare() {}
        public void onScroll() {}
        public void onExpose() {}
        public void onInputMethodQuery() {}
        public void onOrientationChange() {}
        public void onTouchCancel() {}
        public void onThemeChange() {}
        public void onSockClose() {}
        public void onPlatformPanel() {}
        public void onStyleAnimationUpdate() {}
        public void onApplicationStateChange() {}
        public void onWindowChangeInternal() {}
        public void onScreenChangeInternal() {}
        public void onPlatformSurface() {}
        public void onPointer() {}
        public void onTabletTrackingChange() {}
        public void onUser() {}
        public void onMaxUser() {}
        public void setTag(Object obj) {
            QtXnl.widget_set_object_value(nativehandle, Constant.SETTAG, obj);
        }
        public Object getTag() {
            return QtXnl.widget_get_object(nativehandle, Constant.GETTAG);
        }
        // tree event
        public void onItemPressed(long item, int column) {
            if (_treeitemevent != nilptr) {
                _treeitemevent.onItemPressed((QTreeWidget)this, item, column);
            }
        }
        public void onItemClicked(long item, int column) {
            if (_treeitemevent != nilptr) {
                _treeitemevent.onItemClicked((QTreeWidget)this, item, column);
            }
        }
        public void onItemDoubleClicked(long item, int column) {
            if (_treeitemevent != nilptr) {
                _treeitemevent.onItemDoubleClicked((QTreeWidget)this, item, column);
            }
        }
        public void onItemActived(long item, int column) {
            if (_treeitemevent != nilptr) {
                _treeitemevent.onItemActived((QTreeWidget)this, item, column);
            }
        }
        public void onItemEntered(long item, int column) {
            if (_treeitemevent != nilptr) {
                _treeitemevent.onItemEntered((QTreeWidget)this, item, column);
            }
        }
        public void onItemChanged(long item, int column) {
            if (_treeitemevent != nilptr) {
                _treeitemevent.onItemChanged((QTreeWidget)this, item, column);
            }
        }
        public void onItemExpanded(long item) {
            if (_treeitemevent != nilptr) {
                _treeitemevent.onItemExpanded((QTreeWidget)this, item);
            }
        }
        public void onItemCollapsed(long item) {
            if (_treeitemevent != nilptr) {
                _treeitemevent.onItemCollapsed((QTreeWidget)this, item);
            }
        }
        public void onCurrentItemChanged(long cur, long previous) {
            if (_treeitemevent != nilptr) {
                _treeitemevent.onCurrentItemChanged((QTreeWidget)this, cur, previous);
            }
        }
        public void onItemSelectionChanged() {
            if (_treeitemevent != nilptr) {
                _treeitemevent.onItemSelectionChanged((QTreeWidget)this);
            }
        }

        public void onNotify(long eventid) {
            if (_notifyListener != nilptr) {
                _notifyListener.onNotify(this, eventid);
            }
        }

        public void onClick(bool checked) {
            if (_clicklistener != nilptr) {
                _clicklistener.onClick(this, checked);
            }
        }
        public void onToggle(bool checked) {
            if (_clicklistener != nilptr) {
                _clicklistener.onToggle(this, checked);
            }
        }
        public void onPress() {
            if (_clicklistener != nilptr) {
                _clicklistener.onPress(this);
            }
        }
        public void onRelease() {
            if (_clicklistener != nilptr) {
                _clicklistener.onRelease(this);
            }
        }
        public void nativeFinalize() {
            nativehandle = 0;
        }

        public void finalize() {
            if (nativehandle != 0) {
                QtXnl.widget_slot(nativehandle, Constant.NATIVEFINALIZE);
            }
        }
        public void onFinish(int res) {
        }
        public void onAccept() {
        }
        public void onReject() {
        }
        public void QON_SELCHANGED(bool yes) {
            if (_sciEventListener != nilptr) {
                _sciEventListener.QON_SELCHANGED((QScintilla)this, yes);
            }
        }
        public void ON_AUTOCCANCELLED() {
            if (_sciEventListener != nilptr) {
                _sciEventListener.ON_AUTOCCANCELLED((QScintilla)this);
            }
        }
        public void ON_AUTOCCHARDELETED() {
            if (_sciEventListener != nilptr) {
                _sciEventListener.ON_AUTOCCHARDELETED((QScintilla)this);
            }
        }
        public void ON_AUTOCCOMPLETED(String selection, int position, int ch, int method) {
            if (_sciEventListener != nilptr) {
                _sciEventListener.ON_AUTOCCOMPLETED((QScintilla)this, selection, position, ch, method);
            }
        }
        public void ON_AUTOCSELECTION(String selection, int position, int ch, int method) {
            if (_sciEventListener != nilptr) {
                _sciEventListener.ON_AUTOCSELECTION((QScintilla)this, selection, position, ch, method);
            }
        }
        public void ON_AUTOCSELECTION(String selection, int position) {
            if (_sciEventListener != nilptr) {
                _sciEventListener.ON_AUTOCSELECTION((QScintilla)this, selection, position);
            }
        }
        public void SCEN_CHANGE() {
            if (_sciEventListener != nilptr) {
                _sciEventListener.SCEN_CHANGE((QScintilla)this);
            }
        }
        public void ON_CALLTIPCLICK(int direction) {
            if (_sciEventListener != nilptr) {
                _sciEventListener.ON_CALLTIPCLICK((QScintilla)this, direction);
            }
        }
        public void ON_CHARADDED(int charadded) {
            if (_sciEventListener != nilptr) {
                _sciEventListener.ON_CHARADDED((QScintilla)this, charadded);
            }
        }
        public void ON_DOUBLECLICK(int position, int line, int modifiers) {
            if (_sciEventListener != nilptr) {
                _sciEventListener.ON_DOUBLECLICK((QScintilla)this, position, line, modifiers);
            }
        }
        public void ON_DWELLEND(int position, int x, int y) {
            if (_sciEventListener != nilptr) {
                _sciEventListener.ON_DWELLEND((QScintilla)this, position, x, y);
            }
        }
        public void ON_DWELLSTART(int position, int x, int y) {
            if (_sciEventListener != nilptr) {
                _sciEventListener.ON_DWELLSTART((QScintilla)this, position, x, y);
            }
        }
        public void ON_FOCUSIN() {
            if (_sciEventListener != nilptr) {
                _sciEventListener.ON_FOCUSIN((QScintilla)this);
            }
        }
        public void ON_FOCUSOUT() {
            if (_sciEventListener != nilptr) {
                _sciEventListener.ON_FOCUSOUT((QScintilla)this);
            }
        }
        public void ON_HOTSPOTCLICK(int position, int modifiers) {
            if (_sciEventListener != nilptr) {
                _sciEventListener.ON_HOTSPOTCLICK((QScintilla)this, position, modifiers);
            }
        }
        public void ON_HOTSPOTDOUBLECLICK(int position, int modifiers) {
            if (_sciEventListener != nilptr) {
                _sciEventListener.ON_HOTSPOTDOUBLECLICK((QScintilla)this, position, modifiers);
            }
        }
        public void ON_HOTSPOTRELEASECLICK(int position, int modifiers) {
            if (_sciEventListener != nilptr) {
                _sciEventListener.ON_HOTSPOTRELEASECLICK((QScintilla)this, position, modifiers);
            }
        }
        public void ON_INDICATORCLICK(int position, int modifiers) {
            if (_sciEventListener != nilptr) {
                _sciEventListener.ON_INDICATORCLICK((QScintilla)this, position, modifiers);
            }
        }
        public void ON_INDICATORRELEASE(int position, int modifiers) {
            if (_sciEventListener != nilptr) {
                _sciEventListener.ON_INDICATORRELEASE((QScintilla)this, position, modifiers);
            }
        }
        public void ON_MACRORECORD(int msg, long wparam, long lparam) {
            if (_sciEventListener != nilptr) {
                _sciEventListener.ON_MACRORECORD((QScintilla)this, msg, wparam, lparam);
            }
        }
        public void ON_MARGINCLICK(int position, int modifiers, int margin) {
            if (_sciEventListener != nilptr) {
                _sciEventListener.ON_MARGINCLICK((QScintilla)this, position, modifiers, margin);
            }
        }
        public void ON_MARGINRIGHTCLICK(int position, int modifiers, int margin) {
            if (_sciEventListener != nilptr) {
                _sciEventListener.ON_MARGINRIGHTCLICK((QScintilla)this, position, modifiers, margin);
            }
        }
        public void ON_MODIFIED(int position, int modType, String text, int length, int linesAdded, int line, int foldLevelNow, int foldLevelPrev, int token, int annotationLinesAdded) {
            if (_sciEventListener != nilptr) {
                _sciEventListener.ON_MODIFIED((QScintilla)this, position, modType, text, length, linesAdded, line, foldLevelNow, foldLevelPrev, token, annotationLinesAdded);
            }
        }
        public void ON_MODIFYATTEMPTRO() {
            if (_sciEventListener != nilptr) {
                _sciEventListener.ON_MODIFYATTEMPTRO((QScintilla)this);
            }
        }
        public void ON_NEEDSHOWN(int position, int length) {
            if (_sciEventListener != nilptr) {
                _sciEventListener.ON_NEEDSHOWN((QScintilla)this, position, length);
            }
        }
        public void ON_PAINTED() {
            if (_sciEventListener != nilptr) {
                _sciEventListener.ON_PAINTED((QScintilla)this);
            }
        }
        public void ON_SAVEPOINTLEFT() {
            if (_sciEventListener != nilptr) {
                _sciEventListener.ON_SAVEPOINTLEFT((QScintilla)this);
            }
        }
        public void ON_SAVEPOINTREACHED() {
            if (_sciEventListener != nilptr) {
                _sciEventListener.ON_SAVEPOINTREACHED((QScintilla)this);
            }
        }
        public void ON_STYLENEEDED(int position) {
            if (_sciEventListener != nilptr) {
                _sciEventListener.ON_STYLENEEDED((QScintilla)this, position);
            }
        }
        public void ON_UPDATEUI(int updated) {
            if (_sciEventListener != nilptr) {
                _sciEventListener.ON_UPDATEUI((QScintilla)this, updated);
            }
        }
        public void ON_USERLISTSELECTION(String text, int wparam, int ch, int listCompletionMethod) {
            if (_sciEventListener != nilptr) {
                _sciEventListener.ON_USERLISTSELECTION((QScintilla)this, text, wparam, ch, listCompletionMethod);
            }
        }
        public void ON_USERLISTSELECTION(String text, int wparam) {
            if (_sciEventListener != nilptr) {
                _sciEventListener.ON_USERLISTSELECTION((QScintilla)this, text, wparam);
            }
        }
        public void ON_ZOOM() {
            if (_sciEventListener != nilptr) {
                _sciEventListener.ON_ZOOM((QScintilla)this);
            }
        }

        public void onTextChanged(String text) {
            if (_editEventListener != nilptr) {
                _editEventListener.onTextChanged(this, text);
            }
        }

        public void  onTextEdited(String text) {
            if (_editEventListener != nilptr) {
                _editEventListener.onTextEdited(this, text);
            }
        }

        public void onCursorPositionChanged(int n,int o) {
            if (_editEventListener != nilptr) {
                _editEventListener.onCursorPositionChanged(this, n, o);
            }
        }

        public void onReturnPressed() {
            if (_editEventListener != nilptr) {
                _editEventListener.onReturnPressed(this);
            }
        }

        public void onEditingFinished() {
            if (_editEventListener != nilptr) {
                _editEventListener.onEditingFinished(this);
            }
        }

        public void onSelectionChanged() {
            if (_editEventListener != nilptr) {
                _editEventListener.onSelectionChanged(this);
            }
        }

        public void onCurrentTextChange(String text) {
            if (_comboboxListener != nilptr) {
                _comboboxListener.onCurrentTextChange(this, text);
            }
        }

        public void onActivated(int id) {
            if (_comboboxListener != nilptr) {
                _comboboxListener.onActivated(this, id);
            }
        }

        public void onItemSelected(int id) {
            if (_comboboxListener != nilptr) {
                _comboboxListener.onItemSelected(this, id);
            }
        }


        public void onFileChanged(String path) {
            if (_fsweListener != nilptr) {
                _fsweListener.onFileChanged(this, path);
            }
        }

        public void onDirChange(String path) {
            if (_fsweListener != nilptr) {
                _fsweListener.onDirChange(this, path);
            }
        }
        public void onCellChange(int row,int column) {
            if (_tableenvlis != nilptr) {
                _tableenvlis.onCellChange((QTableWidget)this, row, column);
            }
        }
        public void onItemChange(long item) {
            if (_tableenvlis != nilptr) {
                _tableenvlis.onItemChange((QTableWidget)this, item);
            }
        }
        public void onCellPress(int row,int column) {
            if (_tableenvlis != nilptr) {
                _tableenvlis.onCellPress((QTableWidget)this, row, column);
            }
        }
        public void onItemPress(long item) {
            if (_tableenvlis != nilptr) {
                _tableenvlis.onItemPress((QTableWidget)this, item);
            }
        }
        public void onCellClick(int row,int column) {
            if (_tableenvlis != nilptr) {
                _tableenvlis.onCellClick((QTableWidget)this, row, column);
            }
        }
        public void onItemClick(long item) {
            if (_tableenvlis != nilptr) {
                _tableenvlis.onItemClick((QTableWidget)this, item);
            }
        }
        public void onCellDBClick(int row,int column) {
            if (_tableenvlis != nilptr) {
                _tableenvlis.onCellDBClick((QTableWidget)this, row, column);
            }
        }
        public void onItemDBClick(long item) {
            if (_tableenvlis != nilptr) {
                _tableenvlis.onItemDBClick((QTableWidget)this, item);
            }
        }
        public void onCellEnter(int row,int column) {
            if (_tableenvlis != nilptr) {
                _tableenvlis.onCellEnter((QTableWidget)this, row, column);
            }
        }
        public void onItemEnter(long item) {
            if (_tableenvlis != nilptr) {
                _tableenvlis.onItemEnter((QTableWidget)this, item);
            }
        }
        public void onCellActived(int row,int column) {
            if (_tableenvlis != nilptr) {
                _tableenvlis.onCellActived((QTableWidget)this, row, column);
            }
        }
        public void onItemActived(long item) {
            if (_tableenvlis != nilptr) {
                _tableenvlis.onItemActived((QTableWidget)this, item);
            }
        }
        
        public void onEnumPropertyValueChanged(long prop, int item) {

        }
        
        public void onVariantPropertyValueChanged(long prop, int dataType, String stringValue) {

        }
        
        public void onVariantPropertyAttributeChanged(long prop,String strAttributr, int dataType, String stringValue) {

        }
        
        public static bool associateExt(String strName, String strExt, String strAppName, String args, String strAppKey, String strDefaultIcon, String strDescribe){
            String [] params = {strName, strExt, strAppName, args, strAppKey, strDefaultIcon, strDescribe};
            return QtXnl.array_int2(0, Constant.ASSOCIATEEXT, params, 0, 0);
        }
        
        public static bool checkAssociate(String strName, String strExt, String strAppKey){
            String [] params = {strName, strExt, strAppKey};
            return QtXnl.array_int2(0, Constant.CHECKASSOCIATED, params, 0, 0);
        }
    };
};