//xlang Source, Name:QPrinter.xcsm 
//Date: Sat Aug 13:36:30 2019 
package Qt{
    public class QPrinter : QPagedPaintDevice{
        
        private bool need_delloc = true;
        public enum PrinterMode { ScreenResolution, PrinterResolution, HighResolution };
        public enum Orientation { Portrait, Landscape };
        public enum PageOrder   { FirstPageFirst,
                           LastPageFirst };

        public enum ColorMode   { GrayScale,
                           Color };

        public enum PaperSource { OnlyOne,
                           Lower,
                           Middle,
                           Manual,
                           Envelope,
                           EnvelopeManual,
                           Auto,
                           Tractor,
                           SmallFormat,
                           LargeFormat,
                           LargeCapacity,
                           Cassette,
                           FormSource,
                           MaxPageSource, // Deprecated
                           CustomSource
        };

        public enum PrinterState { Idle,
                            Active,
                            Aborted,
                            Error };

        public enum OutputFormat { NativeFormat, PdfFormat };

        // Keep in sync with QAbstractPrintDialog::PrintRange
        public enum PrintRange { AllPages, Selection, PageRange, CurrentPage };

        public enum Unit {
            Millimeter,
            Point,
            Inch,
            Pica,
            Didot,
            Cicero,
            DevicePixel
        };

        public enum DuplexMode {
            DuplexNone = 0,
            DuplexAuto,
            DuplexLongSide,
            DuplexShortSide
        };

        public QPrinter() throws IllegalArgumentException{
            nativehandle = QtXnl.createQPObject(QType.qtPrinter, this, 0, PrinterMode.ScreenResolution, 0, 0, 0);
            if (nativehandle == 0) {
                throw new IllegalArgumentException("can't new Object");
            }
        }
        
        public QPrinter(long handle){
            need_delloc = false;
            nativehandle = handle;
        }
        
        public QPrinter(PrinterMode mode) throws IllegalArgumentException{
            nativehandle = QtXnl.createQPObject(QType.qtPrinter, this, 0, mode, 0, 0, 0);
            if (nativehandle == 0) {
                throw new IllegalArgumentException("can't new Object");
            }
        }
        
        protected void setNeedDelloc(bool bd){
            need_delloc = bd;
        }
        
        protected bool isNeedDelloc(){
            return need_delloc;
        }
        
        public int devType() override {
            return QtXnl.widget_get_int_value(nativehandle, Constant.PAINTERTYPE);
        }
        
        public void setOutputFormat(OutputFormat format){
            QtXnl.widget_set_vint_value(nativehandle, Constant.PRINTERSETOUTFMT, format);
        }
        
        public OutputFormat outputFormat() {
            return (OutputFormat)QtXnl.widget_get_int_value(nativehandle, Constant.PRINTERGETOUTFMT);
        }
        
        public void finalize(){
            if (need_delloc){
                QtXnl.widget_slot(nativehandle, Constant.PRINTERDTOR);
            } 
        }
    };
};