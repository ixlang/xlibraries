//xlang Source, Name:ReportEngine.xcsm 
//Date: Tue Sep 00:53:24 2019 

package Qt{
    public class ReportEngine : QObject{
        enum DataType{IsEmpty, HasNext, ColumnHeaderData, ColumnData, ColumnCount, RowCount};
        enum ChangePosType{Invalid = -1,First, Next};
        enum PreviewHint{ShowAllPreviewBars = 0,
                         HidePreviewToolBar = 1,
                         HidePreviewMenuBar = 2,
                         HidePreviewStatusBar = 4,
                         HideAllPreviewBar = 7,
                         PreviewBarsUserSetting = 8};
                         
        static class ICallbackDatasource : QCore {
            Object getCallbackData(DataType dataType,int index, String columnName);
            bool changePos(ChangePosType type);
        };
        
        interface RenderListener{
            void renderStarted(ReportEngine engine);
            void renderPageFinished(ReportEngine engine, int renderedPageCount);
            void renderFinished(ReportEngine engine);
        };
        
        RenderListener listener = nilptr;
        
        ReportEngine() {//构造
            //TODO:	
        }

        ReportEngine(long handle) {//构造
            super(handle);
        }

        bool registryDataSource(String name,@NotNilptr  ICallbackDatasource dataSource){
            dataSource.nativehandle = QtXnl.long_object_string(nativehandle, Constant.REGDATASOURCE, dataSource, name);
            if (dataSource.nativehandle == 0){
                return false;
            }
            return true;
        }
        
        bool create(){
            nativehandle = QtXnl.createQObject(QType.qtReportEngine, this, 0);
            if (nativehandle == 0){
                return false;
            }
            return true;
        }
        
        bool create(@NotNilptr QWidget parent){
            nativehandle = QtXnl.createQObject(QType.qtReportEngine, this, parent.nativehandle);
            if (nativehandle == 0){
                return false;
            }
            return true;
        }
        
        void renderStarted(){
            if (listener != nilptr){
                listener.renderStarted(this);
            }
        }
        
        void renderPageFinished(int renderedPageCount){
            if (listener != nilptr){
                listener.renderPageFinished(this, renderedPageCount);
            }
        }
        
        void renderFinished(){
            if (listener != nilptr){
                listener.renderFinished(this);
            }
        }
        
        bool loadFromFile(String reportTemplate){
            return QtXnl.widget_set_intstring_value(nativehandle, Constant.LOADREPORTFROMFILE, 0, reportTemplate) != 0;
        }
        
        bool loadFromString(String reportTemplateText){
            return QtXnl.widget_set_intstring_value(nativehandle, Constant.LOADREPORTFROMTEXT, 0, reportTemplateText) != 0;
        }
        
        void previewReport(PreviewHint hint){
            QtXnl.widget_set_vint_value(nativehandle, Constant.SHOWREPORT, hint);
        }
    };
};