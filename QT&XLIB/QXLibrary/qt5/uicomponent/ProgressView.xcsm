//xlang Source, Name:ProgressView.xcsm
//Date: Sun Oct 01:24:51 2018
package Qt{
    public class ProgressView : QWidget {

        double _scale = 1.f;

        String _titleText = "loading";

        int _titleColor = 0xceffffff;
        double _fontSize = 18;

        double _textWidth = 0;
        double _textHeight = 0;
        Timer _animator = nilptr;
        Object _timeObj = new Object();
        int _angle = 0;

        static const int WAIT_INFINITE = -1;
        double _progressPersent = 0.f;
        bool _bShowProgress = false;
        bool _bShowResult = false;
        bool _bResult = false;
        long _dismissMillionSecond = WAIT_INFINITE;
        long _beginMillionSecond = 0;
        OnDismissListener __dismissListener = nilptr;

        static const double HEIGHT_RATE = 1.15f;

        public interface OnDismissListener {
            void onDismissListener(ProgressView v);
        };

        public void setOnDismissListener(OnDismissListener _dismissListener) {
            __dismissListener = _dismissListener;
        }

        public int dip2px(double dpValue) {
            return (int) (dpValue * _scale + 0.5f);
        }

        public void onDrawBackground(@NotNilptr QPainter canvas, double padding, @NotNilptr QPainter.Paint paint) {
            QRect rect = new QRect();
            canvas.setRenderHint(RenderHint.Antialiasing, true);
            rect.left = rect.top = padding;
            rect.right = width() - padding;
            rect.bottom = height() - padding;

            //paint.setAntiAlias(true);
            paint.setColor(0xaf000000);
            paint.setStyle(QPainter.Paint.FILL);
            //paint.setShadowLayer(dip2px(5), 4, 4, Color.BLACK);
            double rxy = Math.min(width(), height()) / 12.f;

            canvas.drawRoundedRect(rect, (int)rxy, (int)rxy, paint);
        }


        public void DrawComplete(@NotNilptr QPainter canvas,double padding,@NotNilptr QPainter.Paint paint,double subCenterX,
                          double subCenterY,double minCenterY,double subwidth,double subheight) {
            double width = subwidth * 5.f;
            double height = width / 6;
            subCenterX -= height;
            subCenterY -= height;
            QRect progsub = new QRect();
            progsub.left = subCenterX - (width / 2.f);
            progsub.top = subCenterY - (height / 2 );
            progsub.bottom = (progsub.top + height);
            progsub.right = progsub.left  + width;

            paint.setColor(0xffffffff);

            paint.setStyle(QPainter.Paint.FILL);
            canvas.save();

            double roundXY = subheight / 2;

            canvas.rotate(90.f,subCenterX,subCenterY);
            canvas.rotate(45.f,subCenterX + (width / 2.f),subCenterY );

            canvas.drawRoundedRect(progsub, (int)roundXY,(int)roundXY, paint);

            canvas.restore();
            canvas.save();
            canvas.translate(1,width / 2);
            canvas.rotate(45,subCenterX,subCenterY);
            progsub.right = progsub.left + (progsub.width() / 2.f) + (height / 2.f);

            canvas.drawRoundedRect(progsub, (int)roundXY,(int)roundXY, paint);
            canvas.restore();
        }

        public void DrawFatal(@NotNilptr QPainter canvas,double padding,@NotNilptr QPainter.Paint paint,double subCenterX,
                       double subCenterY,double minCenterY,double subwidth,double subheight) {
            double width = subwidth * 5.f;
            double height = width / 5;

            QRect progsub = new QRect();
            progsub.left = subCenterX - (width / 2.f);
            progsub.top = subCenterY - (height / 2 );
            progsub.bottom = (progsub.top + height);
            progsub.right = progsub.left  + width;

            paint.setColor(0xffffffff);
            paint.setStyle(QPainter.Paint.FILL);
            canvas.save();

            double roundXY = subheight / 2;
            canvas.rotate(45.f,subCenterX,subCenterY);
            for (int i = 0 ; i < 2; i ++) {
                canvas.rotate(90,subCenterX,subCenterY);
                canvas.drawRoundedRect(progsub,(int) roundXY,(int)roundXY, paint);
            }
            canvas.restore();
        }

        public void DrawWaiting(@NotNilptr QPainter canvas,double padding,@NotNilptr QPainter.Paint paint,double subCenterX,
                         double subCenterY,double minCenterY,double subwidth,double subheight) {
            QRect progsub = new QRect();

            if (_bShowProgress) {
                subCenterY = Math.max((double)minCenterY,height() / 3.f);
            }

            progsub.left = subCenterX - (subwidth * 1.75f);
            progsub.top = subCenterY - (subheight / 2);
            progsub.bottom = progsub.top + subheight;
            progsub.right = progsub.left  + subwidth;

            paint.setColor(0xbfffffff);
            paint.setStyle(QPainter.Paint.FILL);
            canvas.save();

            double roundXY = subheight / 2;

            for (int i = 0 ; i < 12; i ++) {
                canvas.rotate((360 / 12),subCenterX,subCenterY);
                int dis = _angle - (i * (360 / 12));
                if (dis < 0) {
                    dis += 360;
                }
                paint.setAlpha(255 * (360 - dis) / 360);
                canvas.drawRoundedRect(progsub, (int)roundXY, (int)roundXY, paint);
            }
            canvas.restore();
        }

        public void calcTitlePosition(@NotNilptr QPainter canvas,double padding,@NotNilptr QPainter.Paint paint) {

            paint.setTextSize(dip2px(_fontSize));
            //paint.setFakeBoldText(true);
            paint.setColor(_titleColor);
            QFont qf = canvas.getFont();
            if (qf != nilptr){
                //QXReqf.measure(_titleText);
                QRect rect = qf.measure(_titleText);//BitmapUtils.getStringRect(_titleText,paint);
                _textHeight= rect.height();
                _textWidth = rect.width();

                paint.setStyle(QPainter.Paint.FILL);
                paint.setAlpha(0xff);
            }
        }

        public void drawProgress(@NotNilptr QPainter canvas,double padding,
                          @NotNilptr QPainter.Paint paint,double progressX,double progressY,
                          double progressCX,double progressCY) {

            QRect progressRect = new QRect();
            progressRect.left = progressX;
            progressRect.top = progressY;
            progressRect.right = progressX + progressCX;
            progressRect.bottom = progressY + progressCY;

            double prxy =  progressRect.height() / 2.f;
            paint.setStyle(QPainter.Paint.STROKE);
            paint.setStrokeWidth(dip2px(1));
            canvas.drawRoundedRect(progressRect, (int)prxy, (int)prxy, paint);

            paint.setStyle(QPainter.Paint.FILL);
            progressRect.right = 2 + progressRect.left + (_progressPersent * progressCX );
            canvas.drawRoundedRect(progressRect, (int)prxy, (int)prxy, paint);
        }



        public void onDraw(@NotNilptr QPainter canvas) {

            canvas.setPen(0, PenStyle.NoPen, 0);

            double padding = dip2px(5);
            QPainter.Paint paint = new QPainter.Paint();

            //paint.setShadowLayer(0,0,0, Color.BLACK);
            onDrawBackground(canvas,padding,paint);

            double subwidth = dip2px(12);
            double subheight = dip2px(3);
            double minCenterY = padding + (subheight * 2.f);
            double subCenterX = width() / 2.f;
            double subCenterY = Math.max(minCenterY,height() * 2.f / 5.f);
            if (_bShowResult) {
                if (_bResult) {
                    DrawComplete(canvas,padding,paint,subCenterX,subCenterY,minCenterY,subwidth,subheight);
                } else {
                    DrawFatal(canvas,padding,paint,subCenterX,subCenterY,minCenterY,subwidth,subheight);
                }
            } else {
                DrawWaiting(canvas,padding,paint,subCenterX,subCenterY,minCenterY,subwidth,subheight);
            }

            calcTitlePosition(canvas,padding,paint);
            double textX = subCenterX - (_textWidth / 2.f);
            double textY = (subCenterY + (subwidth * 1.75f)) +  (((height() - padding) - (subCenterY + (subwidth * 1.75f))) / 2);


            if (_bShowProgress) {
                textY = subCenterY + (subwidth * 1.75f) + (_textHeight * 1.2f) ;
            }
            canvas.drawText(_titleText, (int)textX, (int)(textY + (_textHeight * 0.8f)), paint);

            paint.setColor(0xbfffffff);

            if (_bShowProgress) {
                double progressCX = (width() - padding) * 2 / 3;
                double progressCY = progressCX / 12.f;
                if (progressCY == 0) {
                    progressCY = dip2px(1);
                }
                double progressX = subCenterX - (width() - padding) / 3;
                double progressY = ((textY) + ((height() - padding) - (textY)) / 2.f) - (progressCY / 2.f);
                drawProgress(canvas,padding,paint,progressX,progressY,progressCX,progressCY);
            }
        }

        public void beginAnimation(long millionSecond) {
            synchronized(_timeObj) {
                if (_animator != nilptr) {
                    return ;
                }
                _dismissMillionSecond = millionSecond;
                _animator = new Timer();
                try{
                    _animator.schedule(new TimerTask() {
                        long beginTime = _system_.currentTimeMillis();
                        long waitTime = millionSecond;

                        void run() override{
                            _angle += 20;
                            _angle = (_angle) % 360;
                            ProgressView.this.postUpdate();
                            if (waitTime != WAIT_INFINITE) {
                                if (_system_.currentTimeMillis() - beginTime > waitTime) {
                                    synchronized(_timeObj) {
                                        _animator.cancel();
                                        _animator = nilptr;
                                        runOnUi(new Runnable() {
                                            void run() override{
                                                dismiss();
                                            }
                                        });
                                    }
                                }
                            } else if (_dismissMillionSecond != waitTime) {
                                waitTime = _dismissMillionSecond;
                                beginTime = _beginMillionSecond;
                            }
                        }

                    }, 50,-1);
                }catch(Exception e){
                    
                }
                
            }
        }


        public void showModal(long millionSecond, bool bModal) {
            setPalette(ColorRole.Background, 0x7fffffff);
            setOpacity(1);
            setWindowFlags(Constant.FramelessWindowHint | Constant.WindowStaysOnTopHint | Constant.Tool);
            setAttribute(Constant.WA_TranslucentBackground, true);

            double width = 150;// dm.widthPixels / WIDTH_RATE;//宽度
            double height = width * HEIGHT_RATE ;//高度
            resize((int)width, (int)height);

            beginAnimation(millionSecond);
            if (bModal) {
                setModal(true);
            }
            show();
        }

        public static ProgressView showWait(long millionSecond) {
            ProgressView _progView = new ProgressView();
            if (_progView.create()) {
                _progView.showModal(millionSecond, false);
                return _progView;
            }
            return nilptr;
        }

        public static ProgressView showWait(@NotNilptr QWidget p, long millionSecond) {
            ProgressView _progView = new ProgressView();
            if (_progView.create(p)) {
                _progView.showModal(millionSecond, true);
                return _progView;
            }
            return nilptr;
        }

        public String getTitleText() {
            return _titleText;
        }

        public void setTitleText(String szTitle) {
            _titleText = szTitle;
        }

        public void setTitleColor(int nColor) {
            _titleColor = nColor;
        }

        public void setTitleFontSize(int sp) {
            _fontSize = sp;
        }

        public void setTitle(String szTitle,int nColor,int sp) {
            _titleText = szTitle;
            _titleColor = nColor;
            _fontSize = sp;
        }

        public void showResult(bool bShowResult,bool bSuccess) {
            _bShowResult = bShowResult;
            _bResult = bSuccess;
        }

        public void EnableProgress(bool bEnable,double persent) {
            _bShowProgress = bEnable;

            _progressPersent = Math.max(0.f, persent);
            _progressPersent = Math.min(1.f, _progressPersent);

        }

        public void setProgress(double persent) {
            if (persent >= 0 && persent <= 1) {
                _progressPersent = persent;
            }
        }

        public void dismissAfter(int millionSecond) {
            _beginMillionSecond = _system_.currentTimeMillis();
            _dismissMillionSecond = millionSecond;
        }

        public void dismiss() {
            _dismiss();
        }

        public void _dismiss() {
            double opacity = 1.f;
            try{
                new Timer().schedule(new TimerTask() {
                    void run()override {
                        runOnUi(new Runnable() {
                            void run() override{
                                opacity -= 0.1;
                                setOpacity(opacity);
                                if (opacity < 0.1) {
                                    close();
                                }
                            }
                        });
                    }
                }, 20, 10);
            }catch(Exception e){
                
            }
            
        }

        public void onPaint(int l, int t, int r, int b, long hpaint) override {
            onDraw(new QPainter(hpaint));
        }

        public bool onClose()override {
            if (__dismissListener != nilptr) {
                __dismissListener.onDismissListener(ProgressView.this);
            }
            return true;
        }
    };
};