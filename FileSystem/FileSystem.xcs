//xlang 

package FileSystem{

	class xfsp{
		static int fs_osid = _system_.getPlatformId();
        static int fs_bits = _system_.getOSBit();
    };
	
    class DarwinApi : Library{
		static bool loaded = false;
        
        static bool load(){
			if (loaded == false){
				try{
					loadLibrary("libc.dylib");
                    loaded = true;
                }catch(Exception e){
					_system_.output(e.getMessage());
                }
            }
            return loaded;
        }
		import{
			int cdecl stat64(String path, ObjectPtr buf);
        };
    };
    
    
    class LniuxApi : Library{
		static bool loaded = false;
        
        static bool load(){
			if (loaded == false){
				try{
					loadLibrary("libc.so.6");
                    loaded = true;
                }catch(Exception e){
					_system_.output(e.getMessage());
                }
            }
            return loaded;
        }
		import{
			int cdecl __lxstat64(int ver, String path, ObjectPtr buf);
        };
    };
	class UnixlikeApi : Library{
    
		static const int 	__S_IFDIR	= 0040000	/* Directory.  */,
			__S_IFCHR =	0020000	/* Character device.  */,
			__S_IFBLK =	0060000	/* Block device.  */,
			__S_IFREG =	0100000	/* Regular file.  */,
			__S_IFIFO =	0010000	/* FIFO.  */,
			__S_IFLNK =	0120000	/* Symbolic link.  */,
			__S_IFSOCK = 0140000	/* Socket.  */,
            __S_ISUID =	04000	/* Set user ID on execution.  */,
			__S_ISGID =	02000	/* Set group ID on execution.  */,
			__S_ISVTX =	01000	/* Save swapped text after use (sticky).  */,
			__S_IREAD =	0400	/* Read by owner.  */,
			__S_IWRITE =	0200	/* Write by owner.  */,
			__S_IEXEC =	0100	/* Execute by owner.  */;
            
		static bool loaded = false;
        
        static int stat64(String path, byte [] recv){
			if (xfsp.fs_osid == 1){
				return LniuxApi.__lxstat64(0, path,recv);
            }
			if (xfsp.fs_osid == 2){
				return DarwinApi.stat64(path,recv);
            }
            return -1;
        }
        static bool load(){
			if (loaded == false){
				try{
					if (xfsp.fs_osid == 1){
						loadLibrary("libc.so.6");
                        LniuxApi.load();
                    }else
                    if (xfsp.fs_osid == 2){
						loadLibrary("libc.dylib");
                        DarwinApi.load();
                    }
                    loaded = true;
                }catch(Exception e){
					_system_.output(e.getMessage());
                }
            }
            return loaded;
        }
        
		import{
			Pointer cdecl opendir(String dir);
			Pointer cdecl readdir(Pointer dir);
			Pointer cdecl memcpy(ObjectPtr dest, Pointer src, Pointer n);
			Pointer cdecl strcpy(ObjectPtr dest, ObjectPtr src);
			Pointer cdecl strlen(Pointer);
			int cdecl closedir(Pointer);
        };
    };
    
	class Win32Api{

		 static class Translate{
			static int data2int(byte [] data, int ofst){
				if (data.length > 3 + ofst){
					return data[ofst] | (((int)data[1 + ofst])<<8) | (((int)data[ofst + 2])<<16) | (((int)data[ofst + 3])<<24);
				}
				return 0;
			}
			static long data2long(byte [] data, int ofst){
				long value = 0;
				if (data.length > 7 + ofst){
					for (int i = 0; i < 8; i ++){
						value <<= 8;
						value |= data[ofst + 7 - i];
                    }
				}
				return value;
			}
		};
	
        
		static const int 
	     INVALID_FILE_ATTRIBUTES		= 		-1,
		 FILE_ATTRIBUTE_READONLY       =      0x00000001  ,  
		 FILE_ATTRIBUTE_HIDDEN        =       0x00000002  ,
		 FILE_ATTRIBUTE_SYSTEM        =       0x00000004  ,
		 FILE_ATTRIBUTE_DIRECTORY     =       0x00000010  ,
		 FILE_ATTRIBUTE_ARCHIVE       =       0x00000020  ,
		 FILE_ATTRIBUTE_DEVICE        =       0x00000040  ,
		 FILE_ATTRIBUTE_NORMAL       =        0x00000080  ,
		 FILE_ATTRIBUTE_TEMPORARY    =        0x00000100  ,
		 FILE_ATTRIBUTE_SPARSE_FILE   =       0x00000200  ,
		 FILE_ATTRIBUTE_REPARSE_POINT   =     0x00000400  ,
		 FILE_ATTRIBUTE_COMPRESSED      =     0x00000800  ,
		 FILE_ATTRIBUTE_OFFLINE         =     0x00001000  ,
		 FILE_ATTRIBUTE_NOT_CONTENT_INDEXED = 0x00002000  ,
		 FILE_ATTRIBUTE_ENCRYPTED       =     0x00004000  ,
		 FILE_ATTRIBUTE_INTEGRITY_STREAM  =   0x00008000  ,
		 FILE_ATTRIBUTE_VIRTUAL         =     0x00010000  ,
		 FILE_ATTRIBUTE_NO_SCRUB_DATA   =     0x00020000  ,
		 FILE_ATTRIBUTE_EA              =     0x00040000  ;
         
		static class Kernel32 : Library{
		static bool loaded = false;
        
        static bool load(){
			if (loaded == false){
				try{
					loadLibrary("kernel32.dll");
                    loaded = true;
                }catch(Exception e){
					
                }
            }
            return loaded;
        }
		import{
				int stdcall GetFileAttributesA(
				  String lpFileName
				);
                
				bool stdcall SetFileAttributesA(
				  String lpFileName,
				  int  dwFileAttributes
				);
                
				Pointer
				stdcall
				FindFirstFileA(
					String lpFileName,
					ObjectPtr wfd
					);

				int
				stdcall
				FindNextFileA(
					Pointer hFindFile,
					ObjectPtr wfd
					);
					
					int
				stdcall
				CloseHandle(
					Pointer hObject
					);
					
				int
				stdcall
				FindClose(
					Pointer hFindFile
					);
					
				bool stdcall GetFileAttributesExA(
				  String   lpFileName,
				  int fInfoLevelId,
				  ObjectPtr lpFileInformation
				);
			};
            
        };
    
    };
    

    class Operator{
    
        static class FILETIME{
            FILETIME(byte [] data, int ofst){
                dwLowDateTime = Win32Api.Translate.data2int(data , ofst);
                dwHighDateTime = Win32Api.Translate.data2int(data , ofst + 4);
            }
            
            int dwLowDateTime;
            int dwHighDateTime;
            
            long getMillis(){
                long m = dwHighDateTime;
                return (((m << 32) | dwLowDateTime) - 116444736000000000l)  /  10000;
            }
        };

        static class WIN32_FIND_DATA{
            static const int FILE_ATTRIBUTE_DIRECTORY = 0x10;
            byte [] data = new byte[320];
            
            bool isDir(){
                return (getFileAttributes() & FILE_ATTRIBUTE_DIRECTORY) == FILE_ATTRIBUTE_DIRECTORY;
            }
            int getFileAttributes(){
                return Win32Api.Translate.data2int(data, 0);
            }
            
            FILETIME getCreationTime(){
                return new FILETIME(data, 4);
            }
            
            FILETIME getLastAccessTime(){
                return new FILETIME(data, 12);
            }
         
            FILETIME getLastWriteTime(){
                return new FILETIME(data, 20);
            } 
            
            long getFileSize(){
                return ((long)Win32Api.Translate.data2int(data, 28) << 32) | Win32Api.Translate.data2int(data, 32) ;
            }
            
            String getFileName(){
                int i = 44;
                for (; i < 304; i++){
                    if (data[i] == 0){
                        break;
                    }
                }
                
                return new String(data, 44, i - 44);
            }
            
            String getName(){
                int i = 304;
                for (; i < 320; i++){
                    if (data[i] == 0){
                        break;
                    }
                }
                
                return new String(data, 304, i - 304);
            }
        };


        interface FileObjectListener{
            void onSearchStart();
            bool onObjectFound(String dir, WIN32_FIND_DATA wfd);
            void onFinish();
        };

        static bool SearchFile(String parentDir, String wildcardPath, FileObjectListener l){
            long hFile = -1; 
            WIN32_FIND_DATA pNextInfo = new WIN32_FIND_DATA();  

            hFile = Win32Api.Kernel32.FindFirstFileA(wildcardPath, pNextInfo.data); 
            
            if(-1 == hFile){  
                l.onFinish();
                return false;  
            }  
            
            l.onSearchStart();
            
            do{  
                bool ret = l.onObjectFound(parentDir, pNextInfo);
                if (false == ret){
                    break;
                }
            }while (1 == Win32Api.Kernel32.FindNextFileA(hFile, pNextInfo.data));
            
            Win32Api.Kernel32.FindClose(hFile);
            l.onFinish();
            return true;
        }
    };
    
	class File{
		String path;
        
        File(String p){
			path = p;
        }
        
        bool exists(){
			return XPlatform.existsSystemFile(path);
        }
        
        static 
        bool exists(String _path){
			return XPlatform.existsSystemFile(_path);
        }
        
        String getPath(){
			return path;
        }
        
        int unixmod(){
			if (UnixlikeApi.load()){
				byte []data = new byte[160];
				if (0 == UnixlikeApi.stat64(path,data)){
					if (xfsp.fs_osid == 2){
						return Win32Api.Translate.data2int(data, 4);
                    }
                    if (xfsp.fs_bits == 32){
						return Win32Api.Translate.data2int(data, 16);
                    }
					return Win32Api.Translate.data2int(data, 24);
				}
			}
            return 0;
        }
        bool isDir(){
			if (xfsp.fs_osid == 0){
				if (Win32Api.Kernel32.load()){
					int attr = Win32Api.Kernel32.GetFileAttributesA(XPlatform.converToPlatformCharSet(path));
					if (attr != Win32Api.INVALID_FILE_ATTRIBUTES){
						return (attr & Win32Api.FILE_ATTRIBUTE_DIRECTORY) == Win32Api.FILE_ATTRIBUTE_DIRECTORY;
					}
				}
            }else{
				int mode = unixmod();
				return (mode & UnixlikeApi.__S_IFDIR) == UnixlikeApi.__S_IFDIR;
            }
            return false;
        }
        
        bool delete(){
			return XPlatform.deleteFile(path);
        }
        
        bool rename(String newname){
			return _system_.rename(XPlatform.converToPlatformCharSet(path), XPlatform.converToPlatformCharSet(newname));
        }
        
        bool mkdir(){
			return XPlatform.mkdir(path);
        }
        
        bool isReadonly(){
			if (xfsp.fs_osid == 0){
				if (Win32Api.Kernel32.load()){
					int attr = Win32Api.Kernel32.GetFileAttributesA(XPlatform.converToPlatformCharSet(path));
					if (attr != Win32Api.INVALID_FILE_ATTRIBUTES){
						return (attr & Win32Api.FILE_ATTRIBUTE_READONLY) == Win32Api.FILE_ATTRIBUTE_READONLY;
					}
				}
            }else{
				int mode = unixmod();
                return (mode & UnixlikeApi.__S_IWRITE) == 0;
            }
            return false;
        }
        
        bool isHidden(){
			if (xfsp.fs_osid == 0){
				if (Win32Api.Kernel32.load()){
					int attr = Win32Api.Kernel32.GetFileAttributesA(XPlatform.converToPlatformCharSet(path));
					if (attr != Win32Api.INVALID_FILE_ATTRIBUTES){
						return (attr & Win32Api.FILE_ATTRIBUTE_HIDDEN) == Win32Api.FILE_ATTRIBUTE_HIDDEN;
					}
				}
			}
            return false;
        }
        
        bool setReadonly(bool br){
			if (xfsp.fs_osid == 0){
				if (Win32Api.Kernel32.load()){
					int attr = Win32Api.Kernel32.GetFileAttributesA(XPlatform.converToPlatformCharSet(path));
					if (attr != Win32Api.INVALID_FILE_ATTRIBUTES){
						if (br ){
							attr |= Win32Api.FILE_ATTRIBUTE_READONLY;
						}else{
							attr &= ~Win32Api.FILE_ATTRIBUTE_READONLY;
						}
						return Win32Api.Kernel32.SetFileAttributesA(XPlatform.converToPlatformCharSet(path),attr);
					}
				}
            }else{
				int mode = unixmod();
				return XPlatform.chmodSystemFile(path,br ? (mode & ~ 0222) : (mode | 0222));
            }
            return false;
        }
        bool setHidden(bool bh){
			if (xfsp.fs_osid == 0){
				if (Win32Api.Kernel32.load()){
					int attr = Win32Api.Kernel32.GetFileAttributesA(XPlatform.converToPlatformCharSet(path));
					if (attr != Win32Api.INVALID_FILE_ATTRIBUTES){
						if (bh ){
							attr |= Win32Api.FILE_ATTRIBUTE_HIDDEN;
						}else{
							attr &= ~Win32Api.FILE_ATTRIBUTE_HIDDEN;
						}
						return Win32Api.Kernel32.SetFileAttributesA(XPlatform.converToPlatformCharSet(path),attr);
					}
				}
			}
            return false;
        }
        long length(){
			if (xfsp.fs_osid == 0){
				byte [] attr = new byte[128];
				if (Win32Api.Kernel32.GetFileAttributesExA(XPlatform.converToPlatformCharSet(path), 0, attr)){
					long hisize = Win32Api.Translate.data2int(attr, 28);
					long losize = Win32Api.Translate.data2int(attr, 32);
					return (hisize << 32) | losize;
				}
            }else{
				if (UnixlikeApi.load()){
					byte []data = new byte[160];
					if (0 == UnixlikeApi.stat64(path,data)){
						if (xfsp.fs_osid == 2){
							return Win32Api.Translate.data2long(data, 96);
                        }
                        if (xfsp.fs_bits == 32){
							return Win32Api.Translate.data2long(data, 44);
                        }
						return Win32Api.Translate.data2long(data, 48);
					}
				}            
            }
            return 0;
        }
        
        long getCreateTime(){
			if (xfsp.fs_osid == 0){
				byte [] attr = new byte[128];
				if (Win32Api.Kernel32.GetFileAttributesExA(XPlatform.converToPlatformCharSet(path), 0, attr)){
					Operator.FILETIME ft = new  Operator.FILETIME(attr, 4);
					return ft.getMillis();
				}
			}
            return 0;
        }
        
        long getLastModifiedTime(){
			if (xfsp.fs_osid == 0){
				byte [] attr = new byte[128];
				if (Win32Api.Kernel32.GetFileAttributesExA(XPlatform.converToPlatformCharSet(path), 0, attr)){
					Operator.FILETIME ft = new  Operator.FILETIME(attr, 20);
					return ft.getMillis();
				}
            }else{
				if (UnixlikeApi.load()){
					byte []data = new byte[160];
					if (0 == UnixlikeApi.stat64(path,data)){
						long second = 0, nsecond = 0;
						if (xfsp.fs_osid == 2){
                        	second = Win32Api.Translate.data2long(data, 48);
							nsecond = Win32Api.Translate.data2long(data, 56);
                        }else
                        if (xfsp.fs_bits == 32){
							second = Win32Api.Translate.data2int(data, 72);
							nsecond = Win32Api.Translate.data2int(data, 80);
                        }else{
							second = Win32Api.Translate.data2long(data, 88);
							nsecond = Win32Api.Translate.data2long(data, 96);
                        }
                        return second * 1000 + nsecond / 1000000L;
					}
				}               
            }
            return 0;
        }
        
        bool chmod(int m){
			return XPlatform.chmodSystemFile(path,m);
        }
        
        String getName(){
			return path.findFilename();
        }
        
        String getParentDir(){
			return path.findVolumePath();
        }
        
        String getExistion(){
			return path.findExtension();
        }
        
        String getFileName(){
			return path.findFilenameAndExtension();
        }
        
        List<File> listfiles_windows(){
			if (false == Win32Api.Kernel32.load()){
				return nilptr;
			}
			List<File> fl = new List<File>();
            
			Operator.FileObjectListener l = new Operator.FileObjectListener(){
				void onSearchStart(){
				
				}
				bool onObjectFound(String dir, Operator.WIN32_FIND_DATA wfd){
					String name = wfd.getFileName();
                    if (name.equals(".") || name.equals("..")){
						return true;
                    }
                    
                    String filename = XPlatform.converPlatformCharSetTo(dir.appendPath(name));
					File fp = new File(filename);
                    fl.add(fp);
                    return true;
				}
				void onFinish(){
				
				}
            };
            
            String platstring = XPlatform.converToPlatformCharSet(path);
			Operator.SearchFile(platstring, platstring.appendPath("*.*"), l);
            
            return fl;
        }
        
		List<File> listfiles_unix(){
        
			if (UnixlikeApi.load() == false){
				return nilptr;
            }
            
            int dtype_offset = 18;
            int nameoffset = 19;
            
            if (xfsp.fs_osid == 2){
				dtype_offset = 7;
                nameoffset = 8;
            }else
            if (xfsp.fs_bits == 32){
				dtype_offset = 10;
				nameoffset = 11;
            }
            
			List<File> fl = new List<File>();
            
			long hdir = UnixlikeApi.opendir(path);
			
			byte [] data = new byte[320];
			//data[319] = 0;
			
			if (hdir != 0){
				long entry = 0;
				while ((entry = UnixlikeApi.readdir(hdir)) != 0){
					byte [] nl = new byte[1];
					UnixlikeApi.memcpy(nl,entry + dtype_offset,(long)1);
					int ft = nl[0];
					
					
					long len = UnixlikeApi.strlen(entry + nameoffset);
					UnixlikeApi.memcpy(data,entry + nameoffset,len);
					
					String name = new String(data, 0, len);
										
					if (name.equals(".") == false && name.equals("..") == false){
						File fp = new File(path.appendPath(name));
						fl.add(fp);
					}
				}
				UnixlikeApi.closedir(hdir);
			}
            
            return fl;
		}
        
        List<File> listFiles(){
			if (xfsp.fs_osid == 0){
				return listfiles_windows();
            }else{
				return listfiles_unix();
            }
        }
        
        List<File> searchFiles(String pattern){
			if (xfsp.fs_osid != 0){
				return nilptr;
            }
            
			if (false == Win32Api.Kernel32.load()){
				return nilptr;
			}
            
			List<File> fl = new List<File>();
            
			Operator.FileObjectListener l = new Operator.FileObjectListener(){
				void onSearchStart(){
				
				}
				bool onObjectFound(String dir, Operator.WIN32_FIND_DATA wfd){
					String name = wfd.getFileName();
                    if (name.equals(".") || name.equals("..")){
						return true;
                    }
                    
                    String filename = XPlatform.converPlatformCharSetTo(dir.appendPath(name));
					File fp = new File(filename);
                    fl.add(fp);
                    return true;
				}
				void onFinish(){
				
				}
            };
            
            String platstring = XPlatform.converToPlatformCharSet(path);
			Operator.SearchFile(platstring, platstring.appendPath(pattern), l);
            
            return fl;
        }
    };
};

/*
package System{
	class out{
		static int println(String text){
			return _system_.consoleWrite(text + "\n");
		}
		static int print(String text){
			return _system_.consoleWrite(text);
		}
	};
	
	class Console{
		Console(){
			_system_.createConsole();
		}
	};
};


using { System; };


int main(String [] args){

	new Console();

	FileSystem.File fp = new FileSystem.File("c:\\windows\\system32");
    
    //fp.setReadonly(false);
    
    bool bd = fp.isDir();
    long len = fp.length();
    
    long h = fp.getLastModifiedTime();
    
    String ss = String.formatDate("%c",h);
    
    List<FileSystem.File> fl =  fp.listFiles();
    
    //fp.setReadonly(true);

    if (fl != nilptr){
		List.Iterator<FileSystem.File> iter = fl.iterator();
        
        while (iter.hasNext()){
			FileSystem.File f = iter.next();
            System.out.println(XPlatform.converToPlatformCharSet(f.getPath()));
        }
    }
  
	Thread.sleep(-1);

	return 0;
}
*/